#pragma once
#include "StdAfx.h"

class Editor;

// Values used to identify individual GUI elements
enum
{
	GUI_ID_ref = 1000,

	GUI_ID_SCENE_NODE_TOOL_BOX,
	GUI_ID_TOOL_BOX_X_POSITION,
	GUI_ID_TOOL_BOX_Y_POSITION,
	GUI_ID_TOOL_BOX_Z_POSITION,
	GUI_ID_TOOL_BOX_X_ROTATION,
	GUI_ID_TOOL_BOX_Y_ROTATION,
	GUI_ID_TOOL_BOX_Z_ROTATION,
	GUI_ID_TOOL_BOX_X_SCALE,
	GUI_ID_TOOL_BOX_Y_SCALE,
	GUI_ID_TOOL_BOX_Z_SCALE,
	GUI_ID_TOOL_BOX_X_SPEED,
	GUI_ID_TOOL_BOX_Y_SPEED,
	GUI_ID_TOOL_BOX_Z_SPEED,
	GUI_ID_TOOL_BOX_MATERIAL_LAMBDA,
	GUI_ID_TOOL_BOX_MATERIAL_MU,
	GUI_ID_TOOL_BOX_MATERIAL_ALPHA,
	GUI_ID_TOOL_BOX_MATERIAL_BETA,
	GUI_ID_TOOL_BOX_MATERIAL_DENSITY,
	GUI_ID_TOOL_BOX_INCREASE_POSITION_X,
	GUI_ID_TOOL_BOX_DECREASE_POSITION_X,
	GUI_ID_TOOL_BOX_INCREASE_ROTATION_X,
	GUI_ID_TOOL_BOX_DECREASE_ROTATION_X,
	GUI_ID_TOOL_BOX_INCREASE_SCALE_X,
	GUI_ID_TOOL_BOX_DECREASE_SCALE_X,
	GUI_ID_TOOL_BOX_INCREASE_POSITION_Y,
	GUI_ID_TOOL_BOX_DECREASE_POSITION_Y,
	GUI_ID_TOOL_BOX_INCREASE_ROTATION_Y,
	GUI_ID_TOOL_BOX_DECREASE_ROTATION_Y,
	GUI_ID_TOOL_BOX_INCREASE_SCALE_Y,
	GUI_ID_TOOL_BOX_DECREASE_SCALE_Y,
	GUI_ID_TOOL_BOX_INCREASE_POSITION_Z,
	GUI_ID_TOOL_BOX_DECREASE_POSITION_Z,
	GUI_ID_TOOL_BOX_INCREASE_ROTATION_Z,
	GUI_ID_TOOL_BOX_DECREASE_ROTATION_Z,
	GUI_ID_TOOL_BOX_INCREASE_SCALE_Z,
	GUI_ID_TOOL_BOX_DECREASE_SCALE_Z,
	GUI_ID_TOOL_BOX_SET_BUTTON,
	GUI_ID_TOOL_BOX_DELETE_BUTTON,

	GUI_ID_FORCE_FIELD_TOOL_BOX,
	GUI_ID_FORCE_FIELD_TOOL_BOX_SET_BUTTON,
	GUI_ID_FORCE_FIELD_TOOL_BOX_X_INTENSITY,
	GUI_ID_FORCE_FIELD_TOOL_BOX_Y_INTENSITY,
	GUI_ID_FORCE_FIELD_TOOL_BOX_Z_INTENSITY,

	GUI_ID_OPEN_SCENE,
	GUI_ID_SAVE_SCENE,
	GUI_ID_TETRAHEDRALIZE_AND_SIMULATE_SCENE,
	GUI_ID_OPEN_MODEL,

	GUI_ID_TOGGLE_DEBUG_INFO,

	GUI_ID_DEBUG_OFF,
	GUI_ID_DEBUG_BOUNDING_BOX,
	GUI_ID_DEBUG_NORMALS,
	GUI_ID_DEBUG_SKELETON,
	GUI_ID_DEBUG_WIRE_OVERLAY,
	GUI_ID_DEBUG_HALF_TRANSPARENT,
	GUI_ID_DEBUG_BUFFERS_BOUNDING_BOXES,
	GUI_ID_DEBUG_ALL,

	GUI_ID_CAMERA_MAYA,
	GUI_ID_CAMERA_FIRST_PERSON,

	GUI_ID_OPEN_DIALOG_BUTTON,
	GUI_ID_FORCE_FIELD_BUTTON,
	GUI_ID_HELP_BUTTON,

	GUI_ID_ABOUT,
	GUI_ID_QUIT,

	GUI_ID_ASK_FILENAME_WINDOW,
	GUI_ID_ASK_FILENAME_NAME,
	GUI_ID_ASK_FILENAME_OK_BUTTON,
	GUI_ID_ASK_FILENAME_CANCEL_BUTTON,

	GUI_ID_CONFIRM_DELETE_WINDOW,
	GUI_ID_CONFIRM_DELETE_BUTTON,
	GUI_ID_CANCEL_DELETE_BUTTON,

	GUI_ID_STATIC_TEXT_CAMERA_FPS,

	GUI_ID_SWITCH_TO_PLAYER,

	GUI_ID_ASK_PARAMETERS_WINDOW,
	GUI_ID_ASK_PARAMETERS_GO_BUTTON,
	GUI_ID_ASK_PARAMETERS_CANCEL_BUTTON,
	GUI_ID_ASK_PARAMETERS_NBTET,
	GUI_ID_ASK_PARAMETERS_NBFRAME,
	GUI_ID_ASK_PARAMETERS_DELTAT,

	GUI_ID_ASK_SWITCH_WINDOW,
	GUI_ID_ASK_SWITCH_YES_BUTTON,
	GUI_ID_ASK_SWITCH_NO_BUTTON
};


enum
{
	OPENING_SCENE,
	OPENING_MODEL
};


class EditorEventReceiver : public IEventReceiver
{
public:
	EditorEventReceiver(Editor* editor);
	~EditorEventReceiver(void);
	
	bool OnEvent(const SEvent& event);

	// display a window that asks for tet & simulation parameters. If previous_was_bad is true, display a warning.
	void askForParameters(bool previous_was_bad=false);

	// display a window that asks if the user would like to play the last generated video directly
	void askForSwitch();

private:
	// reference to the main editor object (which is the parent of this EditorEventReceiver)
	Editor* editor;

	void showHelp();

	void showConfirmDeleteNode();

	void setActiveCamera(scene::ICameraSceneNode* newActive);

	// lets store old mouse position
	position2di oldMousePos;

	// store what we are opening (a scene or a model ?)
	s32 opening;

};
